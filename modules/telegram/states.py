from loguru import logger

logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å {__name__}!")

import re
import asyncio

from telethon.tl.custom import Message
from telethon import events
from telethon.tl.types import (
    ReplyInlineMarkup,
    KeyboardButtonRow,
    KeyboardButtonCallback,
)
from telethon import errors as TGErrors
from random import choice

from .client import client
from .global_checks import *
from .func import get_name, get_id

from .. import config, phrase, formatter


@client.on(events.NewMessage(pattern=r"(?i)^/states$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/states@", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥–æ—Å–≤–∞$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^—Å–ø–∏—Å–æ–∫ –≥–æ—Å–≤$", func=checks))
async def states_all(event: Message):
    data = db.states.get_all()
    if data == {}:
        return await event.reply(phrase.state.empty_list)
    text = phrase.state.all
    n = 1
    for state in data:
        text += f'{n}. **{state}** - {len(data[state]["players"])+1} —á–µ–ª.\n'
        n += 1
    return await event.reply(text)


@client.on(events.NewMessage(pattern=r"(?i)^/toptreasury$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/topstate@", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/—Ç–æ–ø–∫–∞–∑–Ω–∞$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/—Ç–æ–ø –∫–∞–∑–Ω–∞$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–∫–∞–∑–Ω–∞ —Ç–æ–ø$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–∫–∞–∑—Ç–æ–ø$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–∫—Ç–æ–ø$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^–∫–∞–∑–Ω–∞ —Ç–æ–ø$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^–∫–∞–∑—Ç–æ–ø$", func=checks))
async def states_all(event: Message):
    data = db.states.get_all(sortedby="money")
    if data == {}:
        return await event.reply(phrase.state.empty_list)
    text = phrase.state.toptreasury
    n = 1
    for state in data:
        if data[state]["money"] > 0:
            text += f'{n}. **{state}** - {data[state]["money"]} –∏–∑–º.\n'
            n += 1
    return await event.reply(text)


@client.on(events.NewMessage(pattern=r"(?i)^/—Å–æ–∑–¥–∞—Ç—å –≥–æ—Å–≤–æ\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^\+–≥–æ—Å–≤–æ\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^\+–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ\s(.+)", func=checks))
async def state_make(event: Message):
    arg: str = event.pattern_match.group(1).strip().lower()
    if len(arg) > 28:
        return await event.reply(phrase.state.too_long)
    if (not re.fullmatch(r"^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\- ]+$", arg)) or (
        re.fullmatch(r"^[\- ]+$", arg)
    ):
        return await event.reply(phrase.state.not_valid)
    if db.nicks(id=event.sender_id).get() is None:
        return await event.reply(phrase.state.not_connected)
    if db.states.if_author(event.sender_id) is not False:
        return await event.reply(phrase.state.already_author)
    if db.states.if_player(event.sender_id) is not False:
        return await event.reply(phrase.state.already_player)
    if db.states.check(arg.capitalize()) is True:
        return await event.reply(phrase.state.already_here)
    if db.get_money(event.sender_id) < config.coofs.PriceForNewState:
        return await event.reply(phrase.state.require_emerald)
    try:
        return await event.reply(
            phrase.state.warn_make.format(arg),
            buttons=[
                [
                    KeyboardButtonCallback(
                        text=f"üè∞ –°–æ–∑–¥–∞—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ",
                        data=f"state.m.{event.sender_id}.{arg.capitalize()}".encode(),
                    )
                ]
            ],
        )
    except TGErrors.ButtonDataInvalidError:
        return await event.reply(phrase.state.too_long)


@client.on(events.NewMessage(pattern=r"(?i)^/—Å–æ–∑–¥–∞—Ç—å –≥–æ—Å–≤–æ$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^\+–≥–æ—Å–≤–æ$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^\+–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ$", func=checks))
async def state_make(event: Message):
    return await event.reply(phrase.state.no_name)


@client.on(events.NewMessage(pattern=r"(?i)^/–≤—Å—Ç—É–ø–∏—Ç—å(.*)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^–≤—Å—Ç—É–ø–∏—Ç—å(.*)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –≤—Å—Ç—É–ø–∏—Ç—å(.*)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –≤–æ–π—Ç–∏(.*)", func=checks))
async def state_enter(event: Message):
    arg: str = event.pattern_match.group(1).strip()
    if arg == "":
        return await event.reply(phrase.state.no_name)
    if db.states.find(arg) is False:
        return await event.reply(phrase.state.not_find)
    nick = db.nicks(id=event.sender_id).get()
    if nick is None:
        return await event.reply(phrase.state.not_connected)
    if db.states.if_player(event.sender_id) is not False:
        return await event.reply(phrase.state.already_player)
    if db.states.if_author(event.sender_id) is not False:
        return await event.reply(phrase.state.already_author)
    state = db.state(arg)
    if state.enter != True:
        return await event.reply(phrase.state.enter_exit)
    if state.price != 0:
        return await event.reply(
            phrase.state.pay_to_enter,
            buttons=ReplyInlineMarkup(
                [
                    KeyboardButtonRow(
                        [
                            KeyboardButtonCallback(
                                text=f"‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å –≤—Ö–æ–¥ ({state.price})",
                                data=f"state.pay.{state.name}".encode(),
                            )
                        ]
                    )
                ]
            ),
        )
    players = state.players
    players.append(event.sender_id)
    state.change("players", players)
    state_name = state.name.capitalize()
    await client.send_message(
        entity=config.chats.chat,
        message=phrase.state.new_player.format(state=state_name, player=nick),
        reply_to=config.chats.topics.rp,
    )
    if (state.type == 0) and (len(players) >= config.coofs.Type1Players):
        await client.send_message(
            entity=config.chats.chat,
            message=phrase.state.up.format(name=state_name, type="–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ"),
            reply_to=config.chats.topics.rp,
        )
        state.change("type", 1)
    if (state.type == 1) and (len(players) >= config.coofs.Type2Players):
        await client.send_message(
            entity=config.chats.chat,
            message=phrase.state.up.format(name=state_name, type="–ò–º–ø–µ—Ä–∏—è"),
            reply_to=config.chats.topics.rp,
        )
        state.change("type", 2)
    return await event.reply(phrase.state.admit.format(state_name))


@client.on(events.NewMessage(pattern=r"(?i)^/state$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/state@", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥–æ—Å–≤–æ(.*)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ(.*)", func=checks))
async def state_get(event: Message):
    try:
        state_name = event.pattern_match.group(1).strip()
    except IndexError:
        state_name = ""
    if state_name == "":
        check = db.states.if_player(event.sender_id) or db.states.if_author(
            event.sender_id
        )
        if check is False:
            return await event.reply(phrase.state.no_name)
        state_name = check
    if db.states.find(state_name) is False:
        return await event.reply(phrase.state.not_find)
    state = db.state(state_name)
    enter = "–°–≤–æ–±–æ–¥–Ω—ã–π" if state.enter else "–ó–∞–∫—Ä—ã—Ç"
    if state.price > 0:
        enter = formatter.value_to_str(state.price, "–∏–∑—É–º—Ä—É–¥")
    tasks = [get_name(player, minecraft=True) for player in state.players]
    idented_players = await asyncio.gather(*tasks)
    return await event.reply(
        phrase.state.get.format(
            type=phrase.state_types[state.type],
            name=state.name.capitalize(),
            money=formatter.value_to_str(int(state.money), "–∏–∑—É–º—Ä—É–¥"),
            author=db.nicks(id=state.author).get(),
            enter=enter,
            desc=state.desc,
            date=state.date,
            players=len(state.players),
            list_players=", ".join(idented_players),
            xyz=state.coordinates,
        ),
        silent=True,
    )


@client.on(events.NewMessage(pattern=r"(?i)^/–ª–∏–≤–Ω—É—Ç—å", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–ø–æ–∫–∏–Ω—É—Ç—å –≥–æ—Å–≤–æ", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–ø–æ–∫–∏–Ω—É—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^–≤—ã–π—Ç–∏ –∏–∑ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^–≤—ã–π—Ç–∏ –∏–∑ –≥–æ—Å–≤–∞", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –ø–æ–∫–∏–Ω—É—Ç—å", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –≤—ã–π—Ç–∏", func=checks))
async def state_leave(event: Message):
    state_name = db.states.if_player(event.sender_id)
    if state_name is False:
        return await event.reply(phrase.state.not_a_member)
    state = db.state(state_name)
    state.players.remove(event.sender_id)
    state.change("players", state.players)
    state_name: str = state.name.capitalize()
    await client.send_message(
        entity=config.chats.chat,
        message=phrase.state.leave_player.format(
            state=state_name, player=db.nicks(id=event.sender_id).get()
        ),
        reply_to=config.chats.topics.rp,
    )
    if (state.type == 2) and (len(state.players) < config.coofs.Type2Players):
        await client.send_message(
            entity=config.chats.chat,
            message=phrase.state.down.format(name=state.name, type="–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ"),
            reply_to=config.chats.topics.rp,
        )
        state.change("type", 1)
    if (state.type == 1) and (len(state.players) < config.coofs.Type1Players):
        await client.send_message(
            entity=config.chats.chat,
            message=phrase.state.down.format(name=state_name, type="–ö–Ω—è–∂–µ—Å—Ç–≤–æ"),
            reply_to=config.chats.topics.rp,
        )
        state.change("type", 0)
    return await event.reply(phrase.state.leave)


@client.on(events.NewMessage(pattern=r"(?i)^/—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≥–æ—Å–≤–æ", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/—É–¥–∞–ª–∏—Ç—å –≥–æ—Å–≤–æ", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/—É–¥–∞–ª–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^—É–¥–∞–ª–∏—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ —É–¥–∞–ª–∏—Ç—å", func=checks))
async def state_rem(event: Message):
    state_name = db.states.if_author(event.sender_id)
    if state_name is False:
        return await event.reply(phrase.state.not_a_author)
    keyboard = ReplyInlineMarkup(
        [
            KeyboardButtonRow(
                [
                    KeyboardButtonCallback(
                        text=phrase.state.rem_button,
                        data=f"state.remove.{state_name}".encode(),
                    )
                ]
            )
        ]
    )
    return await event.reply(
        phrase.state.rem_message.format(name=state_name), buttons=keyboard
    )


@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –æ–ø–∏—Å–∞–Ω–∏–µ$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–æ –≥–æ—Å–≤–µ$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –æ –≥–æ—Å–≤–µ$", func=checks))
async def state_desc_empty(event: Message):
    return await event.reply(phrase.state.no_desc)


@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –æ–ø–∏—Å–∞–Ω–∏–µ\s([\s\S]+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–æ –≥–æ—Å–≤–µ\s([\s\S]+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –æ –≥–æ—Å–≤–µ\s([\s\S]+)", func=checks))
async def state_desc(event: Message):
    state_name = db.states.if_author(event.sender_id)
    if state_name is False:
        return await event.reply(phrase.state.not_a_author)
    new_desc = event.pattern_match.group(1).strip()
    if len(new_desc) > config.coofs.DescriptionsMaxLen:
        return await event.reply(
            phrase.state.max_len.format(config.coofs.DescriptionsMaxLen)
        )
    db.state(state_name).change("desc", new_desc)
    return await event.reply(phrase.state.change_desc)


@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –∫–æ—Ä–¥—ã$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã$", func=checks))
async def state_coords_empty(event: Message):
    return await event.reply(phrase.state.howto_change_coords)


@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –∫–æ—Ä–¥—ã\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\s(.+)", func=checks))
async def state_coords(event: Message):
    state_name = db.states.if_author(event.sender_id)
    if state_name is False:
        return await event.reply(phrase.state.not_a_author)
    arg: str = event.pattern_match.group(1).strip()
    try:
        arg = list(map(int, arg.split()))
    except ValueError:
        return await event.reply(phrase.state.howto_change_coords)
    if len(arg) != 3:
        return await event.reply(phrase.state.howto_change_coords)
    db.state(state_name).change("coordinates", ", ".join(list(map(str, arg))))
    return await event.reply(phrase.state.change_coords)


@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –≤—Ö–æ–¥—ã\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è\s(.+)", func=checks))
async def state_enter(event: Message):
    state_name = db.states.if_author(event.sender_id)
    if state_name is False:
        return await event.reply(phrase.state.not_a_author)
    arg: str = event.pattern_match.group(1).strip()
    state = db.state(state_name)
    if arg in ["–¥–∞", "+", "—Ä–∞–∑—Ä–µ—à–∏—Ç—å", "–æ—Ç–∫—Ä—ã—Ç—å", "true", "ok", "–æ–∫", "–º–æ–∂–Ω–æ"]:
        if state.price != 0:
            state.change("price", 0)
        elif state.enter is True:
            return await event.reply(phrase.state.already_open)
        state.change("enter", True)
        return await event.reply(phrase.state.enter_open)
    elif arg in [
        "–Ω–µ—Ç",
        "-",
        "–∑–∞–ø—Ä–µ—Ç–∏—Ç—å",
        "–∑–∞–∫—Ä—ã—Ç—å",
        "false",
        "no",
        "–Ω–µ–ª—å–∑—è",
        "–∑–∞–∫—Ä—ã—Ç–æ",
    ]:
        if state.enter is False:
            return await event.reply(phrase.state.already_close)
        state.change("enter", False)
        return await event.reply(phrase.state.enter_close)
    elif arg.isdigit():
        arg = int(arg)
        state.change("price", arg)
        state.change("enter", True)
        return await event.reply(
            phrase.state.enter_price.format(formatter.value_to_str(arg, "–∏–∑—É–º—Ä—É–¥"))
        )
    else:
        return await event.reply(phrase.state.howto_enter)


@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –≤—Ö–æ–¥—ã$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è$", func=checks))
async def state_enter(event: Message):
    state_name = db.states.if_author(event.sender_id)
    if state_name is False:
        return await event.reply(phrase.state.not_a_author)
    state = db.state(state_name)
    if state.enter is True:
        if state.price != 0:
            state.change("price", 0)
        state.change("enter", False)
        return await event.reply(phrase.state.enter_close)
    elif state.enter is False:
        state.change("enter", True)
        return await event.reply(phrase.state.enter_open)


@client.on(events.NewMessage(pattern=r"(?i)^/–ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –ø–æ–ø–æ–ª–Ω–∏—Ç—å\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^\+–∫–∞–∑–Ω–∞\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^–≥ –ø–æ–ø–æ–ª–Ω–∏—Ç—å\s(.+)", func=checks))
async def state_add_money(event: Message):
    state_name = db.states.if_player(event.sender_id)
    if state_name is False:
        state_name = db.states.if_author(event.sender_id)
        if state_name is False:
            return await event.reply(phrase.state.not_a_member)
    arg: str = event.pattern_match.group(1).strip()
    if not arg.isdigit():
        return await event.reply(phrase.state.howto_add_balance)
    try:
        arg = int(arg)
    except Exception:
        return await event.reply(phrase.state.howto_add_balance)
    if arg < 1:
        return await event.reply(phrase.money.negative_count)
    balance = db.get_money(event.sender_id)
    if arg > balance:
        return await event.reply(
            phrase.money.not_enough.format(formatter.value_to_str(balance, "–∏–∑—É–º—Ä—É–¥"))
        )
    db.add_money(event.sender_id, -arg)
    state = db.state(state_name)
    state.change("money", state.money + arg)
    logger.info(f"–ö–∞–∑–Ω–∞ {state_name} –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ {arg}")
    return await event.reply(
        phrase.state.add_treasury.format(formatter.value_to_str(arg, "–∏–∑—É–º—Ä—É–¥"))
    )


@client.on(events.NewMessage(pattern=r"(?i)^/–ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –ø–æ–ø–æ–ª–Ω–∏—Ç—å$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^\+–∫–∞–∑–Ω–∞$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^–≥ –ø–æ–ø–æ–ª–Ω–∏—Ç—å$", func=checks))
async def state_add_money_empty(event: Message):
    return await event.reply(phrase.state.howto_add_balance)


@client.on(events.NewMessage(pattern=r"(?i)^/–∑–∞–±—Ä–∞—Ç—å –∏–∑ –∫–∞–∑–Ω—ã\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ —Å–Ω—è—Ç—å\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^\-–∫–∞–∑–Ω–∞\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^–≥ —Å–Ω—è—Ç—å\s(.+)", func=checks))
async def state_rem_money(event: Message):
    state_name = db.states.if_author(event.sender_id)
    if state_name is False:
        return await event.reply(phrase.state.not_a_author)
    arg: str = event.pattern_match.group(1).strip()
    if not arg.isdigit():
        return await event.reply(phrase.state.howto_rem_balance)
    try:
        arg = int(arg)
    except Exception:
        return await event.reply(phrase.state.howto_rem_balance)
    if arg < 1:
        return await event.reply(phrase.money.negative_count)
    state = db.state(state_name)
    if state.money < arg:
        return await event.reply(phrase.state.too_low)
    state.change("money", state.money - arg)
    db.add_money(event.sender_id, arg)
    return await event.reply(
        phrase.state.rem_treasury.format(formatter.value_to_str(arg, "–∏–∑—É–º—Ä—É–¥"))
    )


@client.on(events.NewMessage(pattern=r"(?i)^/–∑–∞–±—Ä–∞—Ç—å –∏–∑ –∫–∞–∑–Ω—ã$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ —Å–Ω—è—Ç—å$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^\-–∫–∞–∑–Ω–∞$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^–≥ —Å–Ω—è—Ç—å$", func=checks))
async def state_rem_money_empty(event: Message):
    return await event.reply(phrase.state.howto_rem_balance)


@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –∫–∏–∫\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –∫–∏–∫–Ω—É—Ç—å\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –≤—ã–≥–Ω–∞—Ç—å\s(.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≤—ã–≥–Ω–∞—Ç—å\s(.+)", func=checks))
async def state_kick_user(event: Message):
    state_name = db.states.if_author(event.sender_id)
    if state_name is False:
        return await event.reply(phrase.state.not_a_author)
    user = await get_id(event.pattern_match.group(1).strip())
    if user is None:
        return await event.reply(phrase.player_not_in)
    state = db.state(state_name)
    if user not in state.players:
        return await event.reply(phrase.state.player_not_in)
    state.players.remove(user)
    state.change("players", state.players)
    if (state.type == 2) and (len(state.players) < config.coofs.Type2Players):
        await client.send_message(
            entity=config.chats.chat,
            message=phrase.state.down.format(name=state.name, type="–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ"),
            reply_to=config.chats.topics.rp,
        )
        state.change("type", 1)
    if (state.type == 1) and (len(state.players) < config.coofs.Type1Players):
        await client.send_message(
            entity=config.chats.chat,
            message=phrase.state.down.format(name=state_name, type="–ö–Ω—è–∂–µ—Å—Ç–≤–æ"),
            reply_to=config.chats.topics.rp,
        )
        state.change("type", 0)
    await client.send_message(
        entity=config.chats.chat,
        message=choice(phrase.state.kicked_rp).format(
            state=state_name,
            player=await get_name(user, minecraft=True)
        ),
        reply_to=config.chats.topics.rp,
    )
    return await event.reply(
        phrase.state.kicked.format(await get_name(user, minecraft=True))
    )



@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –∫–∏–∫$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –∫–∏–∫–Ω—É—Ç—å$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –≤—ã–≥–Ω–∞—Ç—å$", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≤—ã–≥–Ω–∞—Ç—å$", func=checks))
async def state_kick_user_empty(event: Message):
    state_name = db.states.if_author(event.sender_id)
    if state_name is False:
        return await event.reply(phrase.state.not_a_author)
    if not event.reply_to_msg_id:
        return await event.reply(phrase.state.no_player)
    reply_message = await event.get_reply_message()
    user = reply_message.sender_id
    state = db.state(state_name)
    if user not in state.players:
        return await event.reply(phrase.state.player_not_in)
    state.players.remove(user)
    state.change("players", state.players)
    if (state.type == 2) and (len(state.players) < config.coofs.Type2Players):
        await client.send_message(
            entity=config.chats.chat,
            message=phrase.state.down.format(name=state.name, type="–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ"),
            reply_to=config.chats.topics.rp,
        )
        state.change("type", 1)
    if (state.type == 1) and (len(state.players) < config.coofs.Type1Players):
        await client.send_message(
            entity=config.chats.chat,
            message=phrase.state.down.format(name=state_name, type="–ö–Ω—è–∂–µ—Å—Ç–≤–æ"),
            reply_to=config.chats.topics.rp,
        )
        state.change("type", 0)
    await client.send_message(
        entity=config.chats.chat,
        message=choice(phrase.state.kicked_rp).format(
            state=state_name, player=db.nicks(id=event.sender_id).get()
        ),
        reply_to=config.chats.topics.rp,
    )
    return await event.reply(
        phrase.state.kicked.format(await get_name(user, minecraft=True))
    )


@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –Ω–∞–∑–≤–∞–Ω–∏–µ (.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –Ω–µ–π–º (.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ name (.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–≥ –ø–µ—Ä–µ–Ω–∞–∑–≤–∞—Ç—å (.+)", func=checks))
@client.on(events.NewMessage(pattern=r"(?i)^/–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å–≤–∞ (.+)", func=checks))
async def state_rename(event: Message):
    state_name = db.states.if_author(event.sender_id)
    if state_name is False:
        return await event.reply(phrase.state.not_a_author)
    new_name: str = event.pattern_match.group(1).strip()
    if db.states.check(new_name.capitalize()):
        return await event.reply(phrase.state.already_here)
    keyboard = [
        [
            KeyboardButtonCallback(
                text=phrase.state.button_rename,
                data=f"state.rn.{new_name}.{event.sender_id}".encode()
            )
        ]
    ]
    return await event.reply(
        phrase.state.rename.format(new_name.capitalize()),
        buttons=keyboard,
        parse_mode="html"
    )


